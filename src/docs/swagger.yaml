openapi: 3.0.0
info:
  title: Yummi API
  description: REST API documentation for a recipe sharing platform built with Node.js, Express, and PostgreSQL
  version: 1.0.1

servers:
  - url: /api
    description: Same-origin API
  - url: https://project-yummi-api.onrender.com/api
    description: Production API
paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  /auth/register:
    post:
      summary: Register user
      description: Create a new user account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                  description: User's full name
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  description: User's password (minimum 8 characters)
                  example: SecurePassword123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: SecurePassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Logout user
      description: Logout authenticated user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          description: Not authenticated

  /users/me:
    get:
      summary: Get current user info
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMe'
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      summary: Get another user's details
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '404':
          description: User not found

  /users/avatar:
    patch:
      summary: Update user avatar
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
                    format: uri
        '400':
          description: File required
        '401':
          description: Unauthorized

  /categories:
    get:
      summary: Get all categories
      description: Get list of all recipe categories
      tags: [Categories]
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /areas:
    get:
      summary: Get all areas
      description: Get list of all cuisine areas/regions
      tags: [Areas]
      responses:
        '200':
          description: List of areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'

  /ingredients:
    get:
      summary: Get all ingredients
      description: Get list of all available ingredients
      tags: [Ingredients]
      responses:
        '200':
          description: List of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'

  /testimonials:
    get:
      summary: Get all testimonials
      description: Get list of all user testimonials
      tags: [Testimonials]
      responses:
        '200':
          description: List of testimonials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimonial'

  /recipes:
    get:
      summary: Search and filter recipes
      description: Public endpoint for searching recipes by category, ingredient, and area with pagination and sorting
      tags: [Recipes]
      parameters:
        - name: category
          in: query
          description: Category UUID to filter by
          schema:
            type: string
            format: uuid
            example: 3d2c9d2a-5a10-4e0f-bc6a-1c2f3b4d5e6f
        - name: ingredient
          in: query
          description: Ingredient name to search for (partial match)
          schema:
            type: string
            example: tomato
        - name: area
          in: query
          description: Area UUID to filter by
          schema:
            type: string
            format: uuid
            example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of recipes per page
          schema:
            type: integer
            default: 12
            minimum: 1
            maximum: 50
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [popularity, title, createdAt, time]
            default: createdAt
        - name: sortDir
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of recipes with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                  totalCount:
                    type: integer
                    description: Total number of recipes matching the filters
    post:
      summary: Create recipe
      description: |
        Private endpoint for creating a new recipe with image upload.

        **Authentication Required**: Bearer JWT token in Authorization header

        **File Upload Constraints**:
        - Maximum file size: 5MB
        - Accepted formats: image/* (JPEG, PNG, GIF, WebP, etc.)
        - Field name: 'image'

        **Request Format**: multipart/form-data

        **Note**: The ingredients field should be a JSON string array containing objects with 'id' and 'measure' properties.
      tags: [Recipes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - instructions
                - time
                - categoryId
                - ingredients
                - image
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: Recipe title
                  example: 'Apam balik'
                description:
                  type: string
                  maxLength: 1000
                  description: Recipe description (optional)
                  example: 'A popular Malaysian dessert made with a crispy and fluffy pancake-like batter'
                instructions:
                  type: string
                  minLength: 1
                  description: Detailed cooking instructions
                  example: 'Mix milk, oil and egg together. Sift flour, baking powder and salt into the mixture...'
                time:
                  type: integer
                  minimum: 1
                  description: Cooking time in minutes
                  example: 10
                categoryId:
                  type: string
                  format: uuid
                  description: Category UUID (required)
                  example: '33805d4f-57c6-433a-a529-f5d1da6bbf30'
                areaId:
                  type: string
                  format: uuid
                  description: Area UUID (optional)
                  example: 'c43dcaae-2dc4-4de1-9a82-05307801d247'
                ingredients:
                  type: string
                  description: |
                    JSON string array of ingredients with their measures.
                    Each ingredient object must have 'id' (UUID) and 'measure' (string) properties.
                  example: '[{"id":"be4695eb-740b-470e-8b58-e8f07bfa8ba5","measure":"200ml"},{"id":"ba974136-db23-4b1f-938a-f72fe6c3b587","measure":"60ml"}]'
                image:
                  type: string
                  format: binary
                  description: |
                    Recipe image file
                    - Max size: 5MB
                    - Formats: image/* (JPEG, PNG, GIF, WebP, etc.)
                    - Required field
            encoding:
              image:
                contentType: image/*
      responses:
        '201':
          description: Recipe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: |
            Bad request - Validation error or file upload error:
            - Invalid file format (only images allowed)
            - File size exceeds 5MB limit
            - Missing required fields
            - Invalid JSON format for ingredients
        '401':
          description: |
            Unauthorized:
            - Missing Authorization header
            - Invalid or expired JWT token
            - Authorization header format must be: Bearer <token>
        '500':
          description: Internal server error

  /recipes/popular:
    get:
      summary: Get popular recipes
      description: Public endpoint for getting popular recipes sorted by favorites count
      tags: [Recipes]
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of recipes per page
          schema:
            type: integer
            default: 12
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: List of popular recipes with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                  totalCount:
                    type: integer
                    description: Total number of popular recipes

  /recipes/{id}:
    get:
      summary: Get recipe by ID
      description: Public endpoint for getting detailed recipe information
      tags: [Recipes]
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
    patch:
      summary: Update recipe
      description: |
        Private endpoint for updating own recipe with optional image upload.

        **Authentication Required**: Bearer JWT token in Authorization header

        **File Upload Constraints** (optional):
        - Maximum file size: 5MB
        - Accepted formats: image/* (JPEG, PNG, GIF, WebP, etc.)
        - Field name: 'image'

        **Request Format**: multipart/form-data (to support optional image upload)

        **Note**:
        - All fields are optional for updates
        - The ingredients field should be a JSON string array containing objects with 'id' and 'measure' properties
        - If no image is provided, the existing image will be kept
      tags: [Recipes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: Recipe title (optional)
                  example: 'Updated Apam balik'
                description:
                  type: string
                  maxLength: 1000
                  description: Recipe description (optional)
                  example: 'An updated description of this Malaysian dessert'
                instructions:
                  type: string
                  minLength: 1
                  description: Detailed cooking instructions (optional)
                  example: 'Updated cooking instructions...'
                time:
                  type: integer
                  minimum: 1
                  description: Cooking time in minutes (optional)
                  example: 15
                categoryId:
                  type: string
                  format: uuid
                  description: Category UUID (optional)
                  example: '33805d4f-57c6-433a-a529-f5d1da6bbf30'
                areaId:
                  type: string
                  format: uuid
                  description: Area UUID (optional)
                  example: 'c43dcaae-2dc4-4de1-9a82-05307801d247'
                ingredients:
                  type: string
                  description: |
                    JSON string array of ingredients with their measures (optional).
                    Each ingredient object must have 'id' (UUID) and 'measure' (string) properties.
                  example: '[{"id":"be4695eb-740b-470e-8b58-e8f07bfa8ba5","measure":"250ml"},{"id":"ba974136-db23-4b1f-938a-f72fe6c3b587","measure":"80ml"}]'
                image:
                  type: string
                  format: binary
                  description: |
                    Recipe image file (optional)
                    - Max size: 5MB
                    - Formats: image/* (JPEG, PNG, GIF, WebP, etc.)
                    - If not provided, existing image will be kept
            encoding:
              image:
                contentType: image/*
      responses:
        '200':
          description: Recipe updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: |
            Bad request - Validation error or file upload error:
            - Invalid file format (only images allowed)
            - File size exceeds 5MB limit
            - Invalid JSON format for ingredients
        '401':
          description: |
            Unauthorized:
            - Missing Authorization header
            - Invalid or expired JWT token
            - Authorization header format must be: Bearer <token>
        '403':
          description: Access denied - not the owner of the recipe
        '404':
          description: Recipe not found
    delete:
      summary: Delete recipe
      description: Private endpoint for deleting own recipe
      tags: [Recipes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Recipe deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe deleted successfully
        '401':
          description: Authentication required
        '403':
          description: Access denied
        '404':
          description: Recipe not found

  /recipes/{id}/favorite:
    post:
      summary: Add to favorites
      description: Private endpoint for adding recipe to favorites
      tags: [Recipes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Recipe added to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe added to favorites
        '400':
          description: Recipe already in favorites
        '401':
          description: Authentication required
        '404':
          description: Recipe not found
    delete:
      summary: Remove from favorites
      description: Private endpoint for removing recipe from favorites
      tags: [Recipes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Recipe removed from favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe removed from favorites
        '401':
          description: Authentication required
        '404':
          description: Recipe not found in favorites
  /users/{id}/recipes:
    get:
      summary: Get user's own recipes
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (UUID)
          schema: { type: string, format: uuid }
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 50, default: 12 }
        - name: sortBy
          in: query
          schema: { type: string, enum: [title, time, createdAt], default: createdAt }
        - name: sortDir
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedRecipes' }
        '400': { description: Invalid id or query params }
        '404': { description: User not found }

  /users/{id}/favorites:
    get:
      summary: Get user's favorite recipes
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (UUID)
          schema: { type: string, format: uuid }
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 50, default: 12 }
        - name: sortBy
          in: query
          schema: { type: string, enum: [title, time, createdAt], default: createdAt }
        - name: sortDir
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedRecipes' }
        '400': { description: Invalid id or query params }
        '404': { description: User not found }

  /users/{id}/followers:
    get:
      summary: Get user's followers with their latest recipes
      description: Get a paginated list of users who follow the specified user, including up to 4 latest recipes for each follower
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Followers list with their latest recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '404':
          description: User not found

  /users/{id}/following:
    get:
      summary: Get user's following with their latest recipes
      description: Get a paginated list of users that the specified user is following, including up to 4 latest recipes for each followed user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Following list with their latest recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '404':
          description: User not found

  /users/{id}/follow:
    post:
      summary: Follow a user
      description: Authenticated user follows the specified user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Target user ID to follow
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowActionResponse'
        '400':
          description: Already following or invalid action
        '401':
          description: Authentication required
        '404':
          description: User not found

  /users/{id}/unfollow:
    delete:
      summary: Unfollow a user
      description: Authenticated user unfollows the specified user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Target user ID to unfollow
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowActionResponse'
        '401':
          description: Authentication required
        '404':
          description: Follow relation not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        avatarUrl:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserMe:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            ownRecipesCount:
              type: integer
              description: Number of recipes created by user
              example: 5
            favoriteIds:
              type: array
              description: Array of favorite recipe IDs
              items:
                type: string
                format: uuid
              example: ['f2f2d205-f944-4a70-aa2a-6d565d48af7e', 'a1b2c3d4-5e6f-7890-abcd-ef1234567890']
            followersCount:
              type: integer
              description: Number of users following this user
              example: 25
            followingIds:
              type: array
              description: Array of user IDs this user is following
              items:
                type: string
                format: uuid
              example: ['9cec30f7-9bb2-4109-a328-814e125498c4', 'e70a4a91-7811-4062-8a13-dfcd5e8bc546']

    UserDetail:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            ownRecipesCount:
              type: integer
              description: Number of recipes created by user
              example: 5
            followersCount:
              type: integer
              description: Number of users following this user
              example: 25

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 3d2c9d2a-5a10-4e0f-bc6a-1c2f3b4d5e6f
        name:
          type: string
          example: Dessert

    Area:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
        name:
          type: string
          example: Italian

    Ingredient:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9b8a7c6d-5e4f-3a2b-1c0d-9e8f7a6b5c4d
        name:
          type: string
          example: Tomato

    Testimonial:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        author:
          type: string

    Recipe:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'f2f2d205-f944-4a70-aa2a-6d565d48af7e'
        title:
          type: string
          example: 'Apam balik'
        description:
          type: string
          example: 'A popular Malaysian dessert made with a crispy and fluffy pancake-like batter'
        instructions:
          type: string
          description: Detailed cooking instructions
          example: 'Mix milk, oil and egg together. Sift flour, baking powder and salt into the mixture...'
        thumbUrl:
          type: string
          format: uri
          description: URL to recipe image
          example: 'https://ftp.goit.study/img/so-yummy/preview/Apam%20balik.jpg'
        time:
          type: integer
          description: Cooking time in minutes
          example: 10
        createdAt:
          type: string
          format: date-time
          example: '2023-03-11T19:25:33.248Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-11-20T19:40:11.983Z'
        owner:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: '9cec30f7-9bb2-4109-a328-814e125498c4'
            name:
              type: string
              example: 'GoIT'
            avatarUrl:
              type: string
              format: uri
              nullable: true
              example: null
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: '33805d4f-57c6-433a-a529-f5d1da6bbf30'
            name:
              type: string
              example: 'Dessert'
        area:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 'c43dcaae-2dc4-4de1-9a82-05307801d247'
            name:
              type: string
              example: 'Malaysian'
        ingredients:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: 'be4695eb-740b-470e-8b58-e8f07bfa8ba5'
              name:
                type: string
                example: 'Milk'
              measure:
                type: string
                example: '200ml'

    CreateRecipeRequest:
      type: object
      required: [title, description, time, categoryId, areaId, ingredients, instructions]
      properties:
        title:
          type: string
        description:
          type: string
        time:
          type: integer
        categoryId:
          type: string
          format: uuid
        areaId:
          type: string
          format: uuid
        ingredients:
          type: array
          items:
            type: string
        instructions:
          type: array
          items:
            type: string

    UpdateRecipeRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        time:
          type: integer
        categoryId:
          type: string
          format: uuid
        areaId:
          type: string
          format: uuid
        ingredients:
          type: array
          items:
            type: string
        instructions:
          type: array
          items:
            type: string

    FollowersResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: 2b4439c1-a352-409a-92ff-382ab4cb3bbf
              name:
                type: string
                example: Larry Pageim
              avatarUrl:
                type: string
                nullable: true
                example: null
              ownRecipesCount:
                type: integer
                description: Total number of recipes created by this user
                example: 12
              latestRecipes:
                type: array
                description: Up to 4 latest recipes from this user
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: f2f2d205-f944-4a70-aa2a-6d565d48af7e
                    thumbUrl:
                      type: string
                      format: uri
                      example: https://ftp.goit.study/img/so-yummy/preview/Apam%20balik.jpg
                    title:
                      type: string
                      example: Apam balik
                example:
                  - id: f2f2d205-f944-4a70-aa2a-6d565d48af7e
                    thumbUrl: https://ftp.goit.study/img/so-yummy/preview/Apam%20balik.jpg
                    title: Apam balik
        totalCount:
          type: integer
          example: 1

    FollowActionResponse:
      type: object
      properties:
        message:
          type: string
          description: Status message about follow/unfollow action
          example: Followed
